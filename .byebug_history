continue
@user.errors.full_messages
@user.valid?
next
params
exit
@user.errors.full_messages
@user.valid?
next
@user.errors.full_messages
@user.valid?
@user.errors.full_messages
next
continue
@user.errors.full_messages
@user.errors.messages
@user.valid?
next
params
exit
continue
params
continue
params
continue
@user.valid?
next
@user.errors.full_messages
@user.valid?
@user.save
@user
continue
params
continue
params
continue
@role_param
continue
@user
continue
params
continue
params
continue
params[:role]
@user
params
continue
params
@role_param
@user
continue
@role_param
continue
@role_param
continue
@role_param
continue
:role
@role
role
continue
Date.today
date > Date.today
date
date.present?
continue
activities
continue
project.has_associated_minutes_and_activities?
project.has_associated_minutes_and_activities
project
continue
@associations
associations
continue
associations
continue
@stage
continue
next
continue
stage_options
continue
exit
continue
project.stage
continue
@stage
stage[1].to_s
exit
continue
previous
@stage
continue
stage[1].to_s
stage[1]
continue
@stage_options[1][1].to_s == @project.stage
@stage_options[1][1].to_s
@stage_options[1][1].toString
@stage_options[1][1]
@stage_options[1][0]
@stage_options[1][1]
@stage_options[1][@project.stage]
@stage_options[1]
@stage_options[:1]
continue
@stage_options[:construction]
@stage_options["Construcción"]
@stage_options
stage = @stage_options.index { |option| option[1] == @project.stage }
@project.stage
@stage_options(@project.stage)
@stage_options[:@project.stage]
@stage_options[@project.stage]
continue
exit
@project.stage_status
project.stage_status
continue
params
continue
params
continue
params
continue
@user.errors
continue
@user.errors
continue
next
continue
params
continue
params
continue
params[:user][:current_password]
@user.update(user_params)
@user.errors.full_messages
continue
next
exit
cleaar
@user.errors.full_messages
@user.errors.full_maessages
validate_current_password_authorization
params
continue
params
continue
next
current_password
continue
next
current_password
continue
password_confirmation
continue
current_password
password_confirmation.current_password
password_confirmation
current_password
continue
current_password
password
current_password
continue
fullname
current_password
user_params
params
self
continue
@user.errors
continue
CONTINUE
current_password
continue
current_password.present?
@user.current_password.present?
params
continue
@user.validate_current_password
continue
@user.current_password.present?
@user.encrypted_password_was
@user.encrypted_password_was.present?
@user.validate_current_password
continue
@user.validate_current_password
continue
@user.validate_current_password
@user.encrypted_password_was.present?
encrypted_password_was.present?
@user.valid_password?(params[:user][:current_password])
@user.errors.full_messages
@user.update(user_params)
continue
@user.errors.full_messages
@user.errors.add("Se necesita la contraseña actual para confirmar los cambios")
@user.valid_password?(params[:user][:current_password])
@user.valid_password?
continue
params
continue
@user = User.find_by(email: params[:user][:email])
params
continue
@user.update(user_params)
@user = current_user
params
continue
current_user
continue
@user
continue
@user
continue
@user
continue
@user
continue
@pass
continue
@user.valid?
@user
continue
@user.errors.full_messages
@user.valid?
@ser.valid?
user.valid?
@user
continue
@u.errors.full_messages
@u.valid?
@u
@u = User.new(user_params)
continue
@u = User.new(params)
configure_permitted_parameters
params
continue
params
continue
contnue
p current_user && current_user.role == "admin" ? "Hola" : "No" 
current_user.role
p current_user && current_user.role == 1 ? "Hola" : "No" 
p current_user && current_user.role == admin ? "Hola" : "No" 
p current_user && current_user.role == :admin ? "Hola" : "No" 
p current_user && current_user.role ? "Hola" : "No" 
if current_user && current_user.role 
current_user.role
current_user
user_signed_in?
