continue
self.id_card
self.id_card.blank?
!self.new_record?
self.new_record?
continue
!@user.errors.any?
continue
!@user.errors.any?
continue
!@user.errors.any?
@user.errors.any?
continue
params[:user][:id_card]
user_params[:id_card]
@user.id_card
continue
@user.id_card
continue
params[:user][:id_card]
continue
User.where(id_card: formated_id_card).where.not(id: self.id).exists?
continue
:id_card
id_card
formated_id_card
continue
formated_id_card
self.valid?
continue
self.new_record?
User.where(id_card: formated_id_card).count > 1
formated_id_card
continue
User.where(id_card: formated_id_card).count > 1
User.where(id_card: formated_id_card)
User.exists?(id_card: formated_id_card)
continue
!@user.errors.any?
@user.errors.any?
continue
User.exists?(id_card: formated_id_card)
continue
User.exists?(id_card: formated_id_card)
continue
User.exists?(id_card: formated_id_card)
continue
User.exists?(id_card: formated_id_card)
formated_id_card
continue
User.exists?(id_card: formated_id_card)
formated_id_card
continue
self.id_card
id_card
continue
@user
continue
q.size
q = @minute.minutes_users.map(&:user).uniq
@minute.minutes_users.map(&:user).uniq
@minute
continue
phase_activity["_destroy"]
continue
phase_activity
continue
phase_activity
continue
new_hours.to_s
previous_hours.to_s
continue
activities.size
date_changed
previous_hours.to_s
exit
previous_hours.to_s
new_hours.to_s
continue
next
continue
activities.size
activities
continue
Activity.where(user_id: @activity.user_id, date: params[:activity][:date])
params[:activity][:date]
@activity
continue
@activity
continue
contnue
@activity
continue
previous_hours.to_s
new_hours.to_s
continue
previous_hours.to_s
new_hours.to_s
continue
new_hours.to_s
previous_hours.to_s
exit
previous_hours.to_s
continue
new_hours.to_s
previous_hours.to_s
continue
previous_hours.to_s
new_hours.to_s
continue
previous_hours.to_s
new_hours.to_s
continue
new_hours.to_s
previous_hours.to_s
continue
new_hours.to_s
previous_hours.to_s
continue
new_hours.to_s
previous_hours.to_s
continue
previous_hours.to_s
new_hours.to_s
continue
previous_hours.to_s
new_hours.to_s
continue
!phases_activities.find_by(phase_id: attributes["phase_id"].to_i).nil?
attributes["phase_id"].to_i
phases_activities.find_by(phase_id: attributes["phase_id"].to_i).nil?
phases_activities.find_by(phase_id: attributes["phase_id"]).nil?
attributes["_destroy"] == "false"
attributes["phase_id"]
phases_activities.first
attributes["_destroy"]
exit
attributes
attributes["_destroy"]
attribute["__destroy"]
phases_activities.first
previous_hours.to_s
new_hours.to_s
exit
previous_hours.to_s
new_hours.to_s
exit
nested_attributes
phases_activities
previous_hours.to_s
new_hours.to_s
continue
previous_hours.to_s
new_hours.to_s
exit
phases_activities
previous_hours.to_s
new_hours.to_s
new_hours.to_S
exit
new_hours.to_s
new_hours
continue
exit
params[:activity][:phases_activities_attributes]
non_deleted_phases_activities
exit
attributes
exit
previous_hours.to_s
previous_hours + new_hours > 24
new_hours.to_s
exit
new_hours.to_s
new_phases_activities
exit
new_hours.to_s
new_phases_activities
exit
new_phases_activities
exit
continue
new_phases_activities
exit
new_phases_activities
continue
params[:activity][:phases_activities_attributes]
@activity.phases_activities.size
@activity.phases_activities.first.hours.to_s
@activity.phases_activities
params
new_hours.to_s
previous_hours.to_s
previous_hours + new_hours > 24
continue
previous_hours + new_hours > 24
continue
previous_hours.to_s
previous_hours
new_hours.to_s
previous_hours + new_hours > 24
continue
new_hours.to_s
previous_hours.to_s
continue
new_hours.to_s
previous_hours.to_s
previous_hours
previous_hours + new_hours > 24
exit
previous_hours + new_hours > 24
previous_hours
new_hours
total_hours
exit
total_hours
exit
@activity.get_total_hours
@activity.phases_activities
@activity
 activities.first.get_total_hours
 activities
continue
activities_grouped_by_project
continue
group_phase_by_count
continue
phases_activitites_grouped_by_project
continue
activities_grouped_by_project
continue
@user
continue
@attendees
continue
@attendees.first
@attendees
continue
emails
continue
@minute.minutes_users
continue
@minute
continue
UserMailer.send_status_changed_email(@user).deliver_later
continue
UserMailer.send_status_changed_email(@user).deliver_now
continue
UserMailer.send_status_changed_email(@user).deliver_now
continue
UserMailer.send_status_changed_email(@user).deliver_now
continue
UserMailer.send_status_changed_email(@user)
continue
cotninue
UserMailer.send_status_changed_email(@user)
